buildscript{
    /* ext: build.gradle에서 사용하는 전역변수 설정
        springBootVersion 전역변수를 생성하고 그 값을 2.1.7.RELEASE로 함.
        == spring-boot-gradle-plugin라는 스프링 부트 그레이들 플러그인의 2.1.7.RELEASE를 의존성으로 받음
     */

    ext{
        springBootVersion = '2.1.7.RELEASE'
    }

/*  repositories는 각종 의존성(라이브러리)들을 어떤 원격저장소에서 받을지를 정함
    기본적으로는 mavenCentral을 사용하나, 최근에는 "라이브러리 업로드 난이도" 때문에
    jcenter도 많이 사용함
        ※ mavenCentral은 이전부터 많이 사용하는 저장소이나, 본인이 만든 라이브러리를 업로드하기 위해서는
          많은 과정과 설정이 필요. jcenter는 이러한 문제점을 개선하여 라이브러리 업로드를 간단하게 함.
          jcenter업로드 -> mavenCenter에도 업로드.
          현 코드에서는 두개를 다 사용.
 */
    repositories{
        mavenCentral()
        jcenter()
    }

    /*  dependencies는 프로젝트 개발에 필요한 의존성들을 선언하는 곳.
        org.springframework.boot:spring-boot-starter-web 와
        org.springframework.boot:spring-boot-starter-test 를
        받도록 선언되어 있음
            ※ intellij는 메이븐 저장소의 데이터를 인덱싱해서 관리하기 때문에
              커뮤니티 버전을 사용해도 의존성 자동완성이 가능함.
              => compile 메소드 안에 라이브러리의 이름의 앞부분만 추가한 뒤 자동완성키(Ctrl+Space)를 사용용
              ex) compile('org.springframework.boot:spring-boot-starter')

        의존성 코드는 직접 작성해도 되고, 자동완성으로 만들어도 되나, 특정버전을 명시하면 안됨.
            =>  버전 명시를 하지 않아야만
                "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
                의 버전을 따라가게 됨.
        이와 같이 관리해야 각 라이브러리들의 버전관리가 한곳에 집중되고, 버전 충돌 문제도 해결됨.
     */

   dependencies{
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}
/*  플러그인 의존성들을 적용할 것인지를 결정하는 코드
    'io.spring.dependency-management'는 스프링부트의 의존성들을 관리해주는 플러그인
        => 반드시 추가해야함.
    4개의 플러그인은 자바와 스프링 부트를 사용하기 위한 필수 플러그인. 항상 추가해야함.
 */
apply plugin : 'java'
apply plugin : 'eclipse'
apply plugin : 'org.springframework.boot'
apply plugin : 'io.spring.dependency-management'


group 'Training'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org,springframework.boot:spring-boot-starter-web'
    testRuntimeOnly 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}